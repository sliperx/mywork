
pipeline {
    agent {
        kubernetes {
            defaultContainer 'docker'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
    - name: docker
      image: twnsnd2team/docker:v2
      resources:
        limits:
          memory: "256Mi"
          cpu: "200m"
      command:
        - sleep
        - "1d"
      volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
          readOnly: false
  volumes:
    - name: dockersock
      hostPath:
        path: /var/run/docker.sock
    - name: kubeconfig
      secret:
        secretName: jenkins-agent
                """
        }
    }
   environment {
    APP_ENV = 'finance-dev'
    IMAGE_BASE = 'freenance/postgres-master'
    IMAGE_TAG = "v$BUILD_NUMBER"
    IMAGE_NAME = "${env.IMAGE_BASE}"
    IMAGE_NAME_LATEST = "${env.IMAGE_BASE}:latest"
    DOCKERFILE_NAME = "Dockerfile"
    NAMESPACE = 'finance-dev'
    }
    options {
        timeout(time: 10, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Delete workspace before build starts') {
            steps {
                echo 'Deleting workspace'
                deleteDir()
            }
        }
    stage('Create dockerfile') {
            steps {
                script {
                    def envDocker = """
                    FROM postgres:16
                    COPY ./postgresMaster.sh /docker-entrypoint-initdb.d/postgresMaster.sh
                    RUN chmod 0666 /docker-entrypoint-initdb.d/postgresMaster.sh
                    """
                    writeFile file: 'Dockerfile', text: envDocker
                }
                    sh "cat Dockerfile"
            }
        }
    stage('Create postgres-script') {
            steps {
                script {
                    def envScript = """
                    #!/bin/bash
                    echo "host all all all trust" >> "$PGDATA/pg_hba.conf"
                    echo "host replication $PG_REP_USER $PG_REP_HOST trust" >> "$PGDATA/pg_hba.conf"
                    set -e
                    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "CREATE USER $PG_REP_USER REPLICATION LOGIN CONNECTION LIMIT 100 ENCRYPTED PASSWORD '$PG_REP_PASSWORD';"
                    cat >> ${PGDATA}/postgresql.conf <<EOF
                    wal_level = hot_standby
                    max_wal_senders = 8
                    hot_standby = on
                    wal_keep_size = 130

                    shared_preload_libraries = 'pg_stat_statements'
                    pg_stat_statements.track = 'all'
                    track_activity_query_size = '2048'
                    EOF
                    """
                    writeFile file: 'postgresMaster.sh', text: envScript
                }
                    sh "cat postgresMaster.sh"
            }
    }
    stage('Create deployment') {
            steps {
                script {
                    def envDeployment = """
                    apiVersion: v1
                    kind: PersistentVolume
                    metadata:
                    namespace: {{NAMESPACE}}
                    name: postgresdb-pv-master-{{NAMESPACE}}
                    labels:
                        type: local
                        app: postgresdb-master-{{NAMESPACE}}
                    spec:
                    storageClassName: local-storage
                    capacity:
                        storage: 350Mi
                    accessModes:
                        - ReadWriteOnce
                    hostPath:
                        path: "/data/db/{{NAMESPACE}}/master/"
                    ---
                    apiVersion: v1
                    kind: PersistentVolumeClaim
                    metadata:
                    namespace: {{NAMESPACE}}
                    name: postgresdb-pvc-master-{{NAMESPACE}}
                    spec:
                    storageClassName: local-storage
                    accessModes:
                        - ReadWriteOnce
                    resources:
                        requests:
                        storage: 130Mi
                    ---
                    apiVersion: v1
                    kind: Service
                    metadata:
                    namespace: {{NAMESPACE}}
                    name: postgresdb-master
                    labels:
                        app: postgresdb-master-{{NAMESPACE}}
                    spec:
                    type: ClusterIP
                    ports:
                        - port: 5432
                        targetPort: 5432
                    selector:
                        app: postgresdb-master-{{NAMESPACE}}
                    ---
                    apiVersion: apps/v1
                    kind: StatefulSet
                    metadata:
                    name: postgresdb-master
                    namespace: {{NAMESPACE}}
                    spec:
                    replicas: 1
                    selector:
                        matchLabels:
                        app: postgresdb-master-{{NAMESPACE}}
                    serviceName: postgresdb-headless
                    template:
                        metadata:
                        labels:
                            app: postgresdb-master-{{NAMESPACE}}
                        annotations:
                            fluentd.active: 'true'
                        spec:
                        containers:
                        - name: postgresdb-master
                            image: freenance/postgres-master:{{IMAGE_TAG}}
                            env:
                            - name: TZ
                                value: "UTC-3"
                            - name: POSTGRES_PASSWORD
                                valueFrom:
                                secretKeyRef:
                                    name: postgresql-secret-dev
                                    key: POSTGRES_PASSWORD
                            - name: POSTGRES_USER
                                valueFrom:
                                secretKeyRef:
                                    name: postgresql-secret-dev
                                    key: POSTGRES_USER
                            - name: POSTGRES_DB
                                valueFrom:
                                secretKeyRef:
                                    name: postgresql-secret-dev
                                    key: POSTGRES_DB
                            volumeMounts:
                            - name: postgresdb-data
                            mountPath: /var/lib/postgresql/data
                            resources:
                            requests:
                                memory: "145Mi"
                                cpu: "25m"
                            limits:
                                memory: "180Mi"
                                cpu: "160m"
                        volumes:
                            - name: postgresdb-data
                            persistentVolumeClaim:
                                claimName: postgresdb-pvc-master-{{NAMESPACE}}
                    """
                    writeFile file: 'postgres-master-manifest.yaml', text: envDeployment
                }
                sh "cat postgres-master-manifest.yaml"
            }
    }
    stage('build & push image') {
        steps {
            script {
                def dockerImage = docker.build("${env.IMAGE_NAME}:${IMAGE_TAG}","-f ${env.DOCKERFILE_NAME} .")
                    docker.withRegistry('', 'docker-hub-freenance') {
                    dockerImage.push()
                    }     
                echo "Pushed Docker Image: ${env.IMAGE_NAME}:${IMAGE_TAG}"
                }
                  sh "docker rmi ${env.IMAGE_NAME}:${IMAGE_TAG}"
            }
        }
    }
         stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes-jenkins']) {
                    sh "sed -i 's/{{NAMESPACE}}/${NAMESPACE}/g' postgres-master-manifest.yaml"
                    sh "sed -i 's/{{IMAGE_TAG}}/${IMAGE_TAG}/g' postgres-master-manifest.yaml"
                    sh 'kubectl apply -f postgres-master-manifest.yaml'
                }
            }
        }
    }
    
 